// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ClientToServerServiceClient is the client API for ClientToServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClientToServerServiceClient interface {
	Join(ctx context.Context, in *Address, opts ...grpc.CallOption) (*StatusOk, error)
	Leave(ctx context.Context, in *Address, opts ...grpc.CallOption) (*StatusOk, error)
	Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Status, error)
}

type clientToServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClientToServerServiceClient(cc grpc.ClientConnInterface) ClientToServerServiceClient {
	return &clientToServerServiceClient{cc}
}

func (c *clientToServerServiceClient) Join(ctx context.Context, in *Address, opts ...grpc.CallOption) (*StatusOk, error) {
	out := new(StatusOk)
	err := c.cc.Invoke(ctx, "/ClientToServerService/Join", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToServerServiceClient) Leave(ctx context.Context, in *Address, opts ...grpc.CallOption) (*StatusOk, error) {
	out := new(StatusOk)
	err := c.cc.Invoke(ctx, "/ClientToServerService/Leave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clientToServerServiceClient) Publish(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/ClientToServerService/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClientToServerServiceServer is the server API for ClientToServerService service.
// All implementations must embed UnimplementedClientToServerServiceServer
// for forward compatibility
type ClientToServerServiceServer interface {
	Join(context.Context, *Address) (*StatusOk, error)
	Leave(context.Context, *Address) (*StatusOk, error)
	Publish(context.Context, *Message) (*Status, error)
	mustEmbedUnimplementedClientToServerServiceServer()
}

// UnimplementedClientToServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClientToServerServiceServer struct {
}

func (UnimplementedClientToServerServiceServer) Join(context.Context, *Address) (*StatusOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedClientToServerServiceServer) Leave(context.Context, *Address) (*StatusOk, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Leave not implemented")
}
func (UnimplementedClientToServerServiceServer) Publish(context.Context, *Message) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedClientToServerServiceServer) mustEmbedUnimplementedClientToServerServiceServer() {}

// UnsafeClientToServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClientToServerServiceServer will
// result in compilation errors.
type UnsafeClientToServerServiceServer interface {
	mustEmbedUnimplementedClientToServerServiceServer()
}

func RegisterClientToServerServiceServer(s grpc.ServiceRegistrar, srv ClientToServerServiceServer) {
	s.RegisterService(&ClientToServerService_ServiceDesc, srv)
}

func _ClientToServerService_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToServerServiceServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientToServerService/Join",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToServerServiceServer).Join(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToServerService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Address)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToServerServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientToServerService/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToServerServiceServer).Leave(ctx, req.(*Address))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClientToServerService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClientToServerServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ClientToServerService/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClientToServerServiceServer).Publish(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

// ClientToServerService_ServiceDesc is the grpc.ServiceDesc for ClientToServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClientToServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ClientToServerService",
	HandlerType: (*ClientToServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Join",
			Handler:    _ClientToServerService_Join_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _ClientToServerService_Leave_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _ClientToServerService_Publish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ClientToServer.proto",
}
